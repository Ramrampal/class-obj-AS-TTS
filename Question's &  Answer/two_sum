class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
      for(int i=0;i<nums.size();i++){
        int  x = target -nums[i];
         auto t = find(nums.begin() +i+1, nums.end(),x);
         if( t!= nums.end()){
          //  cout<<i<<" "<< t-nums.begin();
          return { i,  static_cast<int>( t-nums.begin())};
            break;
         }
         }
         return {};
      }


};


Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
