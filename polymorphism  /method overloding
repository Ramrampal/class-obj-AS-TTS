 // method overloding 
  // ⭐⭐⭐ 1  By using defolt argument
#include<iostream>
using namespace std;
 class A {
     public:
      void p ( int m, int n =7){
           cout<< " hII";
      }
 };
  int main(){
        A a1;
        a1.p( 4,5);
        a1.p( 4);
  }
⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐

  // 2 increasing no of arguments
  #include<iostream>
  using namespace std;
   class A {
        public:
          void R ( int p , int q){
               cout<< " increasing no of arguments" << endl;
          }
            int T (  int m, int n, int o){
               cout<< " increasing one orgument " << endl;
           
           return m+n*o;
            }
   };
    int main(){
         A a1;
         a1.R( 3,6);
         a1.T( 5 , 6, 4);
         cout<< a1.T( 4,5,6);
    }
⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐

  //3 changing their data types
  #include<iostream>
  using namespace std;
   class A {
        public:
          void R ( int p , int q){
               cout<< "hiii" << endl;
          }
            int T (   int m, int n,  int o){
               cout<< "  Ram " << endl;
           
           return m+n*o;
            }
   };
    int main(){
         A a1;
         a1.R( 3,6);
         a1.T( 5.0 , 6, 4.5);
         cout<< a1.T( 4.3,5,6.5);
    }
  
 
  
 
 
