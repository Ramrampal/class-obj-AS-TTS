class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;

        for(int i = 0; i < (1 << n); i++) { //2^n
            vector<int> subset;
            for(int j = 0; j < n; j++) {
                if(i & (1 << j)) {  // Check if the j-th bit is set
                    subset.push_back(nums[j]);
                }
            }
            result.push_back(subset); 
        }
        
        return result;  
    }
};

👩🏻‍💻👩🏻‍💻👩🏻‍💻👩🏻‍💻👩🏻‍💻👩🏻‍💻

//with main fun.
/*
#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;

        for(int i = 0; i < (1 << n); i++) {
            vector<int> subset;
            for(int j = 0; j < n; j++) {
                if(i & (1 << j)) {  // Check if the j-th bit is set
                    subset.push_back(nums[j]);
                }
            }
            result.push_back(subset);  // Add the subset to the result
        }
        
        return result;  // Return the result containing all subsets
    }
};

int main(){
    int num;
    cin >> num;  // Read number of elements
    vector<int> p(num);
    
    for(int i = 0; i < num; i++) {  // Loop to read elements into the vector
        cin >> p[i];
    }

    Solution sol;
    vector<vector<int>> result = sol.subsets(p);

    // Output all subsets
    for(const auto& subset : result) {
        cout << "[";
        for(size_t i = 0; i < subset.size(); i++) {
            cout << subset[i];
            if(i < subset.size() - 1) {
                cout << ", ";
            }
        }
        cout << "] ";
    }

    cout << endl;
    return 0;
}
*/
